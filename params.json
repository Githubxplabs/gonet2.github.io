{"name":"gonet/2","tagline":"a game server skeleton in microservice","body":"# 欢迎使用\r\n**gonet/2**是新一代游戏服务器骨架，基于[go语言](http://golang.org)开发，采用了先进的[http/2](http://http2.github.io/)协议作为服务器端主要通信协议，以microservice(微服务)作为主要思想进行架构，采用[docker](https://www.docker.com/)作为服务发布手段。相比第一代[gonet](http://github.com/xtaci/gonet)，基础技术选型更加先进，结构更加清晰易读可扩展。\r\n\r\n## 相关文档\r\n1. [ROADMAP.md](https://github.com/gonet2/doc/blob/master/ROADMAP.md) -- 开发计划\r\n2. [TOOLCHAIN.md](https://github.com/gonet2/doc/blob/master/TOOLCHAIN.md) -- 工具链\r\n3. [INSTALL.md](https://github.com/gonet2/doc/blob/master/INSTALL.md) -- 安装\r\n\r\n## 核心理念\r\n> 关键词: 分布式，手游服务器，基于GO语言        \r\n\r\n业务分离是游戏服务器架构的基本思路，通过职能划分，能够合理调配服务器资源。\r\n资源的大分类包括，IO,CPU,MEM, 例如常见的服务：        \r\n\r\n    IO: 如: 数据库，文件服务        \r\n    CPU: 如: 游戏逻辑        \r\n    MEM: 如: 分词，排名，pubsub     \r\n    \r\n玩家对每种服务的请求量有巨大的不同，比如逻辑请求100次，分词请求1次，所以，没有必要1:1配置资源。\r\n当服务容量增长，如果在monolithic的架构上做(全部服务揉在一起成一个大进程），会严重浪费资源(大量资源闲置，性价比极低), 所以gonet/2架构也是基于microservice的一次尝试。\r\n\r\n为了把所有的服务串起来，必须满足的条件有：    \r\n1. 支持一元RPC调用 (一般的请求/应答模式，类似于函数调用)      \r\n2. 支持服务器推送（例如pubsub服务）        \r\n3. 支持双向流传递 (网关透传stream到后端)        \r\n\r\n我们暂不想自己设计RPC，一是目前RPC繁多，没必要重新发明一个轮子，二是作为开源项目，应充分融入社区，利用现有资源。我们发现目前http2(rfc7540)支持所有以上的要求，google推出的gRPC就是基于http2的RPC实现，当前架构中，所有的服务(microservice)全部通过gRPC连接在一起。 http2支持stream multiplex，即可以在单一tcp连接上，传输多个流，非常适合表达透传数据。\r\n\r\n附: HTTP/2 帧封装         \r\n\r\n        +-----------------------------------------------+\r\n        |                 Length (24)                   |\r\n        +---------------+---------------+---------------+\r\n        |   Type (8)    |   Flags (8)   |\r\n        +-+-------------+---------------+-------------------------------+\r\n        |R|                 Stream Identifier (31)                      |\r\n        +=+=============================================================+\r\n        |                   Frame Payload (0...)                      ...\r\n        +---------------------------------------------------------------+\r\n    \r\n                              Figure 1: Frame Layout\r\n\r\n\r\n## 游戏架构\r\n进入每个服务阅读对应文档      \r\n1. [agent](https://github.com/gonet2/agent): 网关      \r\n2. [game](https://github.com/gonet2/game): 游戏逻辑     \r\n3. [snowflake](https://github.com/gonet2/snowflake): UUID发生器      \r\n4. [chat](https://github.com/gonet2/chat): 聊天服务      \r\n5. [auth](https://github.com/gonet2/auth): 鉴权，登陆环节     \r\n6. [libs](https://github.com/gonet2/libs): 公共组件包       \r\n7. [rank](https://github.com/gonet2/rank): 排名服务     \r\n8. [geoip](https://github.com/gonet2/geoip): IP归属查询         \r\n9. [arch](https://github.com/gonet2/arch): 归档服务          \r\n10. [bgsave](https://github.com/gonet2/bgsave): 与redis结合的存档服务          \r\n11. [wordfilter](https://github.com/gonet2/wordfilter): 脏词过滤服务            \r\n\r\n# 基础设施\r\n1. [nsq](http://nsq.io/)          \r\n2. [etcd](https://github.com/coreos/etcd)  \r\n\r\n基础设施是用于支撑整个架构的基石，选择nsq, etcd的理由是:            \r\n\r\n1. 全部采用go实现，技术栈统一          \r\n2. nsq在bitly商用效果很好，能支持大规模的，高可用(特别是发生网络分区)的分布式应用              \r\n3. etcd是coreos出品的coordinator, 已经得到大面积的使用，有成功案例，配套完善。             \r\n\r\n## 服务关系： \r\n\r\n                 +\r\n                 |\r\n                 +--------------> auth\r\n                 |\r\n                 +----> game1\r\n                 |\r\n    agent1+------>\r\n                 |\r\n                 +----> game2\r\n                 |                +\r\n    agent2+------>                +-----> snowflake\r\n                 |                |\r\n                 +----> game3+---->\r\n                 |                |\r\n                 |                +-----> chat\r\n                 ++               |\r\n                                  +-----> rank\r\n                                  +        \r\n\r\n\r\n具体的服务描述以及使用案例，请进入各个目录中阅读\r\n\r\n所有服务都依赖的一个基础服务是nsqd，用来搜集日志，所有的服务会把日志发送到本地的nsqd收集，通过nsqlookupd管理nsqd拓扑，通过tailn工具或nsq_tail，可以集中收集格式化的日志(json)，消息主题为 : LOG。\r\n\r\n游戏中的归档日志(REDOLOG)，也会通过nsqd发布，并通过arch服务自动归档，消息主题为REDOLOG。\r\n\r\nnsqd部署的方式为： **每个服务器实例部署一个**\r\n\r\n## QQ\r\nQQ: 459420581\r\n\r\n## 链接\r\n* [Gonet2游戏服务器框架解析](http://blog.csdn.net/q26335804/article/category/5726691)  -- by 高\r\n* [grpc,nsq等源码分析](https://github.com/tenywen/share) -- by tenywen\r\n\r\nPS. 感谢热心网友对源码的解读","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}